
Ruby on Rails Independent Study

Meet every Monday at 4:30PM. 

In the three next weeks, get comfortable with Ruby. 
- first two HW 

October second week, start final project

December 1st finish

build from scratch
- 591, 2, 3 : waive class
- TA applications as well 


09/28/2015

Ruby - yields and blocks

example:

  def three_times
    yield
    yield
    yield
  end
  
  #whenever this method is called, a block is called three times.  
  
  three_times do
    puts "hello"
  end
  
  {} this is a block
  
def map 
  a = []
  self.each do |x|
    x << (yield x)
  end
  return a
end

a = [1,2, 3, 4]

p a.map{|x| x**2}

[1, 4, 9, 16, 25]



10/05/2015

use nokogiri which is a HTML parser.  Theres' code that was sent 

pickax regex

11/02/2015

Model-View-Controller model for Ruby on Rails

View is web page.  HTML and JSON

Model is Active Records.  Mapping between tables in the database and the classes in the application.
-  Classes correspond to tables.

Controller  

11/09/2015

Don't use less, use static 
Comment out less comment out rubyracer

use check out (git checkout )

Read 7.1 - 7.4 textbook

Read handout project proposal and project iteration 


Do scaffolds
Do cucumber
do capibara


11/24/2015

SETTING UP THE INITIAL PROJECTS

Gemfile:  specifies dependencies 
- >= means install any version of this gem that's greater than 
the version specified
- ~> means that the major versions must be the same but the minor
versions can be changed

Gemfile.lock
- has the specific versions that are installed in the rails 
project
- should be version controlled!  Exact versions between team 
members

User does a GET or POST, Routes.rb will try to match the mapping
and call the appropriate method and the appropriate controller


11/30/2015

ADDING ASSOCIATIONS
- create a new model
- 


ADDING ROUTES

adding resources
e.g.:
resources :photos

resourceful routing: 

non-resourceful routing: you have routes but not associated with resource (not REST-ful)
- typically, you don't use this
- by default, the first welcome page is a non-resourceful route
- legacy purposes: non-resourceful routes go to any URL goes to any URL (arbitrary) 


collection route: 
- good for waiver, closed and open 


Dan's docker instructions:

    docker run -it -p 3000:3000 mcit-waiver:latest

    eval $(docker-machine env default)

    docker exec -it "some name" bash

    detach == // control + p + q

    //saving images
    docker commit "some name" "image name"

To mount User/James from Windows to Docker container:
    docker run -it --rm -v //c/Users/James:/James ubuntu:14.04 bash

member routes
- lets say you have an album. Do something for album 17
- other option: this route is for all albums 


Git reset!
git reset --hard origin/master

Ruby version:
Uses Ruby 2.0.0
Rails 3.2.21

Classes:
rails destroy scaffold McitClass
rails g scaffold Course name:string
rails g migration add_course_id_to_waiver course_id:integer
rake db:migrate
bundle exec annotate
rake db:seed //Course.create([{name: 'CIT591'}, {name: 'CIT592'}, {name: 'CIT593'}])

//add to Course model,  has_many :waivers
//add to Waiver model, belongs_to :course

rake db:migrate

//add to view -> waivers -> _form.html.erb
  <div class="field">
    <%= f.label :course %><br />
    <%= collection_select(:waiver, :course_id, Course.all, :id, :name) %>  
  </div>

//add to view -> waivers -> show.html.erb
  <p>
    <b>Course ID:</b>
    <%= @waiver.course_id %>
  </p>


//add to view -> courses -> show.html.erb 
    <p>
      <b>Name:</b>
      <%= @course.name %>
    </p></br>

    <table class="table">
      <tr>
        <th>First name</th>
        <th>Last name</th>
        <th>Email address</th>
        <th>Waiver class</th>
        <th>Replacement class</th>
        <th>Taken replacement class</th>
        <th>Comments</th>
        <th>Status</th>
        <th></th>
        <th></th>
        <th></th>
      </tr>

    <% @course.waivers.each do |waiver| %>
      <tr>
        <td><%= waiver.first_name %></td>
        <td><%= waiver.last_name %></td>
        <td><%= waiver.email %></td>
        <td><%= waiver.waiver_class %></td>
        <td><%= waiver.replacement_class %></td>
        <td><%= waiver.taken_replacement_class %></td>
        <td><%= waiver.comments %></td>
        <td><%= waiver.status %></td>
        <td><%= link_to 'Show', waiver %></td>
        <td><%= link_to 'Edit', edit_waiver_path(waiver) %></td>
        <td><%= link_to 'Destroy', waiver, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
    </table>



devise notes: 

https://launchschool.com/blog/how-to-use-devise-in-rails-for-authentication
https://github.com/plataformatec/devise/wiki/How-To:-Add-an-Admin-role#option-2---adding-an-admin-attribute
http://jonallured.com/2011/04/30/using-devise-for-admin-accounts.html
http://rubyjunky.com/building-admin-from-the-rails-scaffold.html

Admin:

  before_filer :authenticate_admin!

  dashboard:
    rails g controller admin home
    get 'admin' => 'admin#home'` //To make the admin home page reside at /admin weâ€™ll change get 'admin/home' in config/routes.rb to:

    <h1>Admin Dashboard</h1>
<ul>
  <li><%= link_to 'Posts', posts_path %></li>
  <li><%= link_to 'Comments', comments_path %></li>
</ul>

 <%= link_to('Logout', destroy_user_session_path, :method => :delete) %>   
 
Users:

  before_filer :authenticate_user!



Approve and Deny

routes.rb:

  resources :waivers do
    member do
      post 'deny'
    end
  end

  resources :waivers do
    member do
      post 'approve'
    end
  end

index.html.erb:

    <td><%= link_to 'Deny', deny_waiver_path(waiver), method: :post %></td>    
    <td><%= link_to 'Approve', approve_waiver_path(waiver), method: :post %></td>    

waivers_controller.rb

  def deny
    @waiver = Waiver.find(params[:id])
    @waiver.update_attribute(:status, "Denied")
    redirect_to @waiver
  end

  def approve
    @waiver = Waiver.find(params[:id])
    @waiver.update_attribute(:status, "Approved")
    redirect_to @waiver
  end

HAD DONE BEFORE:
    <td><%= link_to 'Deny', waiver, waiver.update_attribute(:status, "Denied"), method: :put %></td>    

SOLR

rake sunspot:solr:run


TESTING:

had trouble testing but it worked after, "rake db:test:prepare"



PREVENTING ADMIN AND INSTRUCTOR BEING LOGGED IN AT SAME TIME

1) rails generate controller Registrations

2) add the code in registrations_controller.rb

class RegistrationsController < Devise::RegistrationsController
  
  def new
    super
  end

  def edit
    super
  end

  def update
    super
  end

  def destroy
    super
  end

  def cancel
    super
  end

  def create
      build_resource(sign_up_params)

      resource.save
      yield resource if block_given?
      if resource.persisted?
        if resource.active_for_authentication?
          set_flash_message :notice, :signed_up if is_flashing_format?
          #sign_up(resource_name, resource) #this prevents the new users that are created from logging in 
          #respond_with resource, location: after_sign_up_path_for(resource)
          respond_with resource, location: users_path

        else
          set_flash_message :notice, :"signed_up_but_#{resource.inactive_message}" if is_flashing_format?
          expire_data_after_sign_in!
          respond_with resource, location: after_inactive_sign_up_path_for(resource)
        end
      else
        clean_up_passwords resource
        set_minimum_password_length
        respond_with resource
      end
    end

end

3)  devise_for :users, :controllers => {:registrations => "registrations"}




GETTING TO CONFIRMATION PAGE: 

Before:  set up McitWaiver@gmail.com account to send emails from.

0) add following at the end of waivers_controller.rb

def confirm
end

1) add   get "confirm" => "waivers#confirm"  to routes.rb

2) add :confirm to before_filter :check_admin_logged_in

3) add the following to confirm.html.erb

<h1>Waiver confirmation page</h1>
</br>
<p>Waiver was successfully submitted!</p>
<p>You should receive a confirmation email soon.</p>

</br><%= link_to 'Back to home', root_path %> 

4) change in def create: 

redirect_to @waiver
  to
redirect_to confirm_path



CONFIRMATION MAILER:

0) change redirect for create in waivers_controller.rb to

redirect_to confirm_path(:id => @waiver.id)

1) rails generate mailer WaiverMailer

2) waiver_mailer.rb -> changed from@example.com to MCIT Waiver

3) Add code: 

class WaiverMailer < ActionMailer::Base
  default from: "MCIT Waiver"

  def confirmation_email(waiver)
    @waiver = waiver
    mail(to: @waiver.email, subject: 'Waiver Submission Confirmation')
  end
end

4) create "confirmation_email.text.erb" in app/views/waiver_mailer

5) add text:

Your waiver submission was successful, <%= @waiver.first_name %>.

===============================================
 
Waiver details

First name:           <%= @waiver.first_name %>
Last name:            <%= @waiver.last_name %>
Your email:           <%= @waiver.email %>
Class you requested to waive:   <%= @waiver.course.name %>
Replacement class:        <%= @waiver.replacement_class %>
Taken replacement class?:   <%= @waiver.taken_replacement_class %>

Additionally Comments:      <%= @waiver.comments %>

6) add to waivers_controller:

  def confirm
    @waiver = Waiver.find(params[:id])
    WaiverMailer.confirmation_email(@waiver).deliver    
  end

7) Add html file

<!DOCTYPE html>
<html>
  <head>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
  </head>
  <body>
    <h1>Waiver Submission Confirmation</h1>
    <p>Your waiver submission was successful, <%= @waiver.first_name %>.</p>
<p>    Waiver details</p>
<p>
    </p>
<p>First name:           <%= @waiver.first_name %></p>
<p>Last name:            <%= @waiver.last_name %></p>
<p>Your email:           <%= @waiver.email %></p>
<p>Class you requested to waive:   <%= @waiver.course.name %></p>
<p>Replacement class:        <%= @waiver.replacement_class %></p>
<p>Taken replacement class?:   <%= @waiver.taken_replacement_class %></p>
<p>Additionally Comments:      <%= @waiver.comments %></p>
    <p>
    </p>
    <p>You'll receive another email when the status of your waiver is updated.</p>
  </body>
</html>

8) Add smtp_settings.rb in initializers:

ActionMailer::Base.smtp_settings = {
    :address => "smtp.gmail.com",
    :port => "587",
    :domain => "gmail.com",
    :user_name => "#####",
    :password => "#######",
    :authentication => "plain",
    :enable_starttls_auto => true
}

9) Add code to development.rb:

  # Don't care if the mailer can't send
  config.action_mailer.raise_delivery_errors = true
  #config.action_mailer.default_url_options = {:host => 'localhost:3000'} # must change to URL of production app
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    address: "smtp.gmail.com",
    port: "587",
    domain: "gmail.com",
    authentication: "plain",
    enable_starttls_auto: true,
    user_name: 'McitWaiver@gmail.com',
    password: 'McitWaiver1234567890'
  }

10) rake db:migrate





Interation 3:

  Figure out how to make pop up window for instructor comments

  things to follow up with Swap:
    - exactly HOW does he want the Fall Term / Spring Term / Summer Term/ year thing implemented.
  - each waiver "has a" term 
  - user should have least overhead 
    -automate a script that creates fall and spring term
    - look at current time stamp, and if the term does not exist, populate it in db 
  - Aggregates page 
    - fall vs. spring

  - title down all the resources, make sure if there are resources we don't want ppl to access, we
  don't let them, using only: and except: 
  
  http://guides.rubyonrails.org/routing.html#restricting-the-routes-created


Feb 23 is presentation

















Possible need to rescue:

<html>
<h1>Data on Waivers</h1>

<table class="table">
  <tr>
    <th>Total number of waivers</th>
    <th>Total number of approved waivers</th>
    <th>Total number of denied waivers</th>
    <th>Waivers by Semester</th>
    <th>Waivers by Course</th>
  </tr>

  <tr>
    <td><%= @waivers.length %></td>
    <td><%= @waivers.select{|waiver| waiver.status == "Approved"}.length %></td>
    <td><%= @waivers.select{|waiver| waiver.status == "Denied"}.length %></td>
    <td>  
      <% year = 0 %>      
      <% @waivers.each do |waiver_to_get_year| %>
        <% @fall_waivers = 0 %>
        <% @spring_waivers = 0 %>
        <% @waivers.each do |waiver| 
          if waiver.created_at.month > 7 
            @fall_waivers = @fall_waivers + 1
          else 
            @spring_waivers = @spring_waivers + 1
          end %>
        <% end %>
        <% if year != waiver_to_get_year.created_at.year %>
          Fall <%= waiver_to_get_year.created_at.year %> waivers = <%= @fall_waivers %></br>
          Spring <%= waiver_to_get_year.created_at.year %> waivers = <%= @spring_waivers %></br>
          <% year = waiver_to_get_year.created_at.year %>
        <% end %>
     <% end %>
    </td>

    <td>
      <% @courses.each do |course| %>
        <%= course.name %> = <%=  course.waivers.length %></br>
      <% end %>
    </td>
  </tr>
</table>

<%= link_to('Admin Logout', destroy_admin_session_path, method: :delete) %></br>
<%= link_to "Administrator Dashboard", admin_path %>

</html>




Fixing sign up bug where anyone can sign up

Go to: config/initializers/devise.rb

Uncomment and change to true:   config.scoped_views = true

Go to shared / new.html.erb for users

delete: 

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name) %><br />
<% end -%>

Add in registrations_controller.rb: 

      # checks that admin is logged in
  before_filter :check_admin_logged_in!, except: [:update]

  # checks that instructor is logged in
  before_filter :check_user_logged_in!, only: [:update]


  private
    def check_admin_logged_in! # admin must be logged in
        authenticate_admin!
    end

    def check_user_logged_in! # if admin is not logged in, instructor must be logged in
      if !admin_signed_in?
        authenticate_user!
      end   
    end


Go to views/users/registrations/new and add
<% if admin_signed_in? %>

<% else %>

<html><head>
<title>403 Forbidden</title>
</head><body>
<h1>Forbidden</h1>
<br />
<p>You don't have permission to access /sign_up on this server.<br />
</p>
</body></html>

<% end %>


Go to views/users/index.html.erb and add


<% if admin_signed_in? %>

<% else %>

<html><head>
<title>403 Forbidden</title>
</head><body>
<h1>Forbidden</h1>
<br />
<p>You don't have permission to access /users on this server.<br />
</p>
</body></html>

<% end %>


For password reset, uncomment in development.rb
  config.action_mailer.default_url_options = {:host => 'localhost:3000'} #must change to url of production app
